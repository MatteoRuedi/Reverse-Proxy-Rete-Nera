


						REVERSE PROXY 

Un proxy inverso appare agli utenti esterni come se fosse il server di origine, sebbene non generi il contenuto stesso. Intercetta invece le richieste e, in base alle regole configurate e ai contenuti della sua cache, servirà una copia cache del contenuto richiesto stesso, oppure inoltrerà la richiesta al server di origine, eventualmente memorizzando nella cache il contenuto restituito per utilizzarlo con richieste future.

PREPARAZIONE MACCHINA VIRTUALE
Scheda 1 nat
scheda 2 host only

Moba per shell


sudo nano /etc/apt/apt.conf.d/proxy.conf

Acquire::http::Proxy "http://10.0.2.2:5865";
Acquire::https::Proxy "http://10.0.2.2:5865";

etc/netplan/tab
sudo netplan apply

APACHE TRAFFIC SERVER COME INSTALLARLO
sudo apt-get update
sudo apt-get install trafficserver

COME CONFIGURARLO

All'interno del file records.config bisogna:
 -Abilitare la memorizzazione nella cache delle richieste HTTP proxy  --> CONFIG proxy.config.http.cache.http INT 1
 -Abilitare il supporto del proxy inverso                             --> CONFIG proxy.config.reverse_proxy.enabled INT 1
 -Abilitare se si vuole che Traffic Server serva solo le
  richieste dai server di origine elencati nelle regole 
  di mappatura del file remap.config. 
  Se una richiesta non corrisponde, il browser riceverà un errore.    --> CONFIG proxy.config.url_remap.remap_required INT 1
 -Abilitare se si vuole mantenere l'intestazione dell'host client
  in una richiesta durante la rimappature  				--> CONFIG proxy.config.url_remap.pristine_host_hdr INT 1
 -Abilitare in modo che ATP si colleghi alla porta desiderata 
  per il traffico http sia per IPv4 che IPv6 				--> CONFIG proxy.config.http.server_ports STRING 8080 8080:ipv6


All'interno del file remap.config bisogna:
 -Scrivere le regole di mappatura					--> map http://ATSIP/ http://SERVERAPACHE/
                                                                      --> map https://192.168.56.20/ http://192.168.56.30:8080/
 -Regole mappatura https                                              --> map https://192.168.56.20/ https://192.168.56.30:8080/
 -controllare che il rp ascolti sulla 80                              --> netstat -nl | grep :80

										OUTPUT RICHIESTO
										tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN

https://www.insystems.nl/blog/apache-traffic-server-ats-as-reverse-proxy-for-outsystems/
https://developer.chrome.com/docs/devtools/network/reference/?utm_source=devtools#provisional-headers

Per configurare Traffic Server in modo che memorizzi nella cache tutte le risposte HTTP, è necessario modificare il valore di una variabile di configurazione chiamata proxy.config.http.cache.required_headersin 0 . Questo può essere fatto usando il set_varcomando di traffic_line.

sudo traffic_line --set_var proxy.config.http.cache.required_headers --value 0
Applica la modifica utilizzando il reread_configflag.

sudo traffic_line --reread_config
										tcp6       0      0 :::80                   :::*                    LISTEN

All'interno del file storage.config bisogna:
 -Impostare a preferenza la spazio dedicato alla cache                --> /var/cache/trafficserver 500M


NOTA BENE: dopo ogni modifica riavviare il servizio


GENERARE CERTIFICATO SSL
 -Generare tramite OpenSSL la chiave privata e il certificato pubblico--> sudo openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out 																				 certificate.pem
 -Visualizzare il certificato creato  								  --> openssl x509 -text -noout -in certificate.pem
 -Combinare la chiave e il certificato in un pacchetto PKCS#12 (P12)  --> sudo openssl pkcs12 -inkey key.pem -in certificate.pem -export -out certificate.p12
 -Convalidare il file P12                                             --> sudo openssl pkcs12 -in certificate.p12 -noout -info
 -Nota: API Connect supporta solo il file in formato P12 (PKCS12) per il presente certificato. Il file P12 deve contenere la chiave privata, il certificato 		   pubblico dell'autorità di certificazione e tutti i certificati intermedi utilizzati per la firma. Il tuo file P12 può contenere un 
                massimo di 10 certificati intermedi.




---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------


						REVERSE PROXY POUND


## Minimal sample configuration
##
## see pound(8) for details

## NOTE: pound currently only seems to work with non-loopback
## addresses. This sample therefore will not work until adapted.

Global:
  User:         "root"
  Group:        "root"
  #RootJail     "/chroot/pound"

Backends:
  - &be
    Address: 192.168.56.30
    Port: 8080

# This section must exist, but may be empty.
HTTPListeners:
  - Address: 192.168.56.10
    Port: 80
    Services:
      - Backends:
        - *be

# This section must exist, but may be empty.
HTTPSListeners:








global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305>
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http
frontend haproxy-main
        bind *:80
        option forwardfor
        default_backend s1

backend s1
        server s1 192.168.56.30:8080 check
backend s2
        server s2 192.168.56.50:8080 check

listen stats
        bind :8800
        stats enable
        stats uri /
        stats hide-version
        stats auth test:test
        default_backend apache_webservers





prova-----------------------------------------------------------
frontend haproxy-main
        bind *:80
        option forwardfor
        default_backend s1

backend s1
        server s1 192.168.56.30:8080 check
        server s2 192.168.56.50:8080 check

listen stats
        bind :8800
        stats enable
        stats uri /
        stats hide-version
        stats auth test:test
        default_backend apache_webservers


---------------------------------------------giusto
frontend localhost
    mode http
    use_backend web1 if { hdr(host) -i abc.com }
    use_backend web1 if { hdr(host) -i def.com }
    use_backend web2 if { hdr(host) -i cba.com }
    use_backend web2 if { hdr(host) -i fed.com }

backend web1
    server web1 web1.foo.com

backend web2
    server web2 web2.foo.com

https://www.tecmint.com/configure-ssl-certificate-haproxy/




apache 

sudo apt update
sudo apt install apache2
sudo nano /etc/apache2/ports.conf
systemctl restart apache2
https://www.digitalocean.com/community/tutorials/how-to-create-a-ssl-certificate-on-apache-for-ubuntu-14-04
per ssl